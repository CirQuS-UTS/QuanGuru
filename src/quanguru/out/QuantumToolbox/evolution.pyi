from .customTypes import Matrix as Matrix
from .functions import sortedEigens as sortedEigens
from .linearAlgebra import hc as hc
from .states import densityMatrix as densityMatrix, mat2Vec as mat2Vec, vec2Mat as vec2Mat, zerosMat as zerosMat
from typing import Callable, List, Optional

def Unitary(Hamiltonian: Matrix, timeStep: float = ...) -> Matrix: ...
def Liouvillian(Hamiltonian: Optional[Matrix] = ..., collapseOperators: Optional[List] = ..., decayRates: Optional[List] = ..., _double: bool = ...) -> Matrix: ...
def LiouvillianExp(Hamiltonian: Optional[Matrix] = ..., timeStep: float = ..., collapseOperators: Optional[List] = ..., decayRates: Optional[List] = ..., exp: bool = ..., _double: bool = ...) -> Matrix: ...
def dissipator(operatorA: Matrix, operatorB: Optional[Matrix] = ..., identity: Optional[Matrix] = ..., _double: bool = ...) -> Matrix: ...
def evolveOpen(initialState, totalTime, timeStep: float = ..., Hamiltonian: Optional[Matrix] = ..., collapseOperators: Optional[List] = ..., decayRates: Optional[List] = ..., calcFunc: Optional[Callable] = ..., delStates: Optional[bool] = ..., _double: bool = ...) -> Matrix: ...
def steadyState(Hamiltonian: Optional[Matrix] = ..., collapseOperators: Optional[List] = ..., decayRates: Optional[List] = ..., _double: bool = ...) -> Matrix: ...
